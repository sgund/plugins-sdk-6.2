/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.Metadata;
import de.uhh.l2g.plugins.model.MetadataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Metadata service. Represents a row in the &quot;LG_Metadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.MetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetadataImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see MetadataImpl
 * @see de.uhh.l2g.plugins.model.Metadata
 * @see de.uhh.l2g.plugins.model.MetadataModel
 * @generated
 */
public class MetadataModelImpl extends BaseModelImpl<Metadata>
	implements MetadataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metadata model instance should use the {@link de.uhh.l2g.plugins.model.Metadata} interface instead.
	 */
	public static final String TABLE_NAME = "LG_Metadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "metadataId", Types.BIGINT },
			{ "URLID", Types.VARCHAR },
			{ "format", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "coverage", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "creator", Types.VARCHAR },
			{ "publisher", Types.VARCHAR },
			{ "contributor", Types.VARCHAR },
			{ "rightsHolder", Types.VARCHAR },
			{ "rights", Types.VARCHAR },
			{ "provenance", Types.VARCHAR },
			{ "source", Types.VARCHAR },
			{ "relation", Types.VARCHAR },
			{ "audience", Types.VARCHAR },
			{ "instructionalMethods", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_Metadata (metadataId LONG not null primary key,URLID VARCHAR(75) null,format VARCHAR(75) null,type_ VARCHAR(75) null,language VARCHAR(75) null,title VARCHAR(75) null,subject VARCHAR(75) null,coverage VARCHAR(75) null,description VARCHAR(75) null,creator VARCHAR(75) null,publisher VARCHAR(75) null,contributor VARCHAR(75) null,rightsHolder VARCHAR(75) null,rights VARCHAR(75) null,provenance VARCHAR(75) null,source VARCHAR(75) null,relation VARCHAR(75) null,audience VARCHAR(75) null,instructionalMethods VARCHAR(75) null,date_ DATE null)";
	public static final String TABLE_SQL_DROP = "drop table LG_Metadata";
	public static final String ORDER_BY_JPQL = " ORDER BY metadata.metadataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_Metadata.metadataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.Metadata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.Metadata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.Metadata"));

	public MetadataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metadataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetadataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metadataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Metadata.class;
	}

	@Override
	public String getModelClassName() {
		return Metadata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("metadataId", getMetadataId());
		attributes.put("URLID", getURLID());
		attributes.put("format", getFormat());
		attributes.put("type", getType());
		attributes.put("language", getLanguage());
		attributes.put("title", getTitle());
		attributes.put("subject", getSubject());
		attributes.put("coverage", getCoverage());
		attributes.put("description", getDescription());
		attributes.put("creator", getCreator());
		attributes.put("publisher", getPublisher());
		attributes.put("contributor", getContributor());
		attributes.put("rightsHolder", getRightsHolder());
		attributes.put("rights", getRights());
		attributes.put("provenance", getProvenance());
		attributes.put("source", getSource());
		attributes.put("relation", getRelation());
		attributes.put("audience", getAudience());
		attributes.put("instructionalMethods", getInstructionalMethods());
		attributes.put("date", getDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long metadataId = (Long)attributes.get("metadataId");

		if (metadataId != null) {
			setMetadataId(metadataId);
		}

		String URLID = (String)attributes.get("URLID");

		if (URLID != null) {
			setURLID(URLID);
		}

		String format = (String)attributes.get("format");

		if (format != null) {
			setFormat(format);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String coverage = (String)attributes.get("coverage");

		if (coverage != null) {
			setCoverage(coverage);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String creator = (String)attributes.get("creator");

		if (creator != null) {
			setCreator(creator);
		}

		String publisher = (String)attributes.get("publisher");

		if (publisher != null) {
			setPublisher(publisher);
		}

		String contributor = (String)attributes.get("contributor");

		if (contributor != null) {
			setContributor(contributor);
		}

		String rightsHolder = (String)attributes.get("rightsHolder");

		if (rightsHolder != null) {
			setRightsHolder(rightsHolder);
		}

		String rights = (String)attributes.get("rights");

		if (rights != null) {
			setRights(rights);
		}

		String provenance = (String)attributes.get("provenance");

		if (provenance != null) {
			setProvenance(provenance);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String relation = (String)attributes.get("relation");

		if (relation != null) {
			setRelation(relation);
		}

		String audience = (String)attributes.get("audience");

		if (audience != null) {
			setAudience(audience);
		}

		String instructionalMethods = (String)attributes.get(
				"instructionalMethods");

		if (instructionalMethods != null) {
			setInstructionalMethods(instructionalMethods);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}
	}

	@Override
	public long getMetadataId() {
		return _metadataId;
	}

	@Override
	public void setMetadataId(long metadataId) {
		_metadataId = metadataId;
	}

	@Override
	public String getURLID() {
		if (_URLID == null) {
			return StringPool.BLANK;
		}
		else {
			return _URLID;
		}
	}

	@Override
	public void setURLID(String URLID) {
		_URLID = URLID;
	}

	@Override
	public String getFormat() {
		if (_format == null) {
			return StringPool.BLANK;
		}
		else {
			return _format;
		}
	}

	@Override
	public void setFormat(String format) {
		_format = format;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getCoverage() {
		if (_coverage == null) {
			return StringPool.BLANK;
		}
		else {
			return _coverage;
		}
	}

	@Override
	public void setCoverage(String coverage) {
		_coverage = coverage;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getCreator() {
		if (_creator == null) {
			return StringPool.BLANK;
		}
		else {
			return _creator;
		}
	}

	@Override
	public void setCreator(String creator) {
		_creator = creator;
	}

	@Override
	public String getPublisher() {
		if (_publisher == null) {
			return StringPool.BLANK;
		}
		else {
			return _publisher;
		}
	}

	@Override
	public void setPublisher(String publisher) {
		_publisher = publisher;
	}

	@Override
	public String getContributor() {
		if (_contributor == null) {
			return StringPool.BLANK;
		}
		else {
			return _contributor;
		}
	}

	@Override
	public void setContributor(String contributor) {
		_contributor = contributor;
	}

	@Override
	public String getRightsHolder() {
		if (_rightsHolder == null) {
			return StringPool.BLANK;
		}
		else {
			return _rightsHolder;
		}
	}

	@Override
	public void setRightsHolder(String rightsHolder) {
		_rightsHolder = rightsHolder;
	}

	@Override
	public String getRights() {
		if (_rights == null) {
			return StringPool.BLANK;
		}
		else {
			return _rights;
		}
	}

	@Override
	public void setRights(String rights) {
		_rights = rights;
	}

	@Override
	public String getProvenance() {
		if (_provenance == null) {
			return StringPool.BLANK;
		}
		else {
			return _provenance;
		}
	}

	@Override
	public void setProvenance(String provenance) {
		_provenance = provenance;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public String getRelation() {
		if (_relation == null) {
			return StringPool.BLANK;
		}
		else {
			return _relation;
		}
	}

	@Override
	public void setRelation(String relation) {
		_relation = relation;
	}

	@Override
	public String getAudience() {
		if (_audience == null) {
			return StringPool.BLANK;
		}
		else {
			return _audience;
		}
	}

	@Override
	public void setAudience(String audience) {
		_audience = audience;
	}

	@Override
	public String getInstructionalMethods() {
		if (_instructionalMethods == null) {
			return StringPool.BLANK;
		}
		else {
			return _instructionalMethods;
		}
	}

	@Override
	public void setInstructionalMethods(String instructionalMethods) {
		_instructionalMethods = instructionalMethods;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Metadata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Metadata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Metadata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetadataImpl metadataImpl = new MetadataImpl();

		metadataImpl.setMetadataId(getMetadataId());
		metadataImpl.setURLID(getURLID());
		metadataImpl.setFormat(getFormat());
		metadataImpl.setType(getType());
		metadataImpl.setLanguage(getLanguage());
		metadataImpl.setTitle(getTitle());
		metadataImpl.setSubject(getSubject());
		metadataImpl.setCoverage(getCoverage());
		metadataImpl.setDescription(getDescription());
		metadataImpl.setCreator(getCreator());
		metadataImpl.setPublisher(getPublisher());
		metadataImpl.setContributor(getContributor());
		metadataImpl.setRightsHolder(getRightsHolder());
		metadataImpl.setRights(getRights());
		metadataImpl.setProvenance(getProvenance());
		metadataImpl.setSource(getSource());
		metadataImpl.setRelation(getRelation());
		metadataImpl.setAudience(getAudience());
		metadataImpl.setInstructionalMethods(getInstructionalMethods());
		metadataImpl.setDate(getDate());

		metadataImpl.resetOriginalValues();

		return metadataImpl;
	}

	@Override
	public int compareTo(Metadata metadata) {
		long primaryKey = metadata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Metadata)) {
			return false;
		}

		Metadata metadata = (Metadata)obj;

		long primaryKey = metadata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Metadata> toCacheModel() {
		MetadataCacheModel metadataCacheModel = new MetadataCacheModel();

		metadataCacheModel.metadataId = getMetadataId();

		metadataCacheModel.URLID = getURLID();

		String URLID = metadataCacheModel.URLID;

		if ((URLID != null) && (URLID.length() == 0)) {
			metadataCacheModel.URLID = null;
		}

		metadataCacheModel.format = getFormat();

		String format = metadataCacheModel.format;

		if ((format != null) && (format.length() == 0)) {
			metadataCacheModel.format = null;
		}

		metadataCacheModel.type = getType();

		String type = metadataCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			metadataCacheModel.type = null;
		}

		metadataCacheModel.language = getLanguage();

		String language = metadataCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			metadataCacheModel.language = null;
		}

		metadataCacheModel.title = getTitle();

		String title = metadataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			metadataCacheModel.title = null;
		}

		metadataCacheModel.subject = getSubject();

		String subject = metadataCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			metadataCacheModel.subject = null;
		}

		metadataCacheModel.coverage = getCoverage();

		String coverage = metadataCacheModel.coverage;

		if ((coverage != null) && (coverage.length() == 0)) {
			metadataCacheModel.coverage = null;
		}

		metadataCacheModel.description = getDescription();

		String description = metadataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			metadataCacheModel.description = null;
		}

		metadataCacheModel.creator = getCreator();

		String creator = metadataCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			metadataCacheModel.creator = null;
		}

		metadataCacheModel.publisher = getPublisher();

		String publisher = metadataCacheModel.publisher;

		if ((publisher != null) && (publisher.length() == 0)) {
			metadataCacheModel.publisher = null;
		}

		metadataCacheModel.contributor = getContributor();

		String contributor = metadataCacheModel.contributor;

		if ((contributor != null) && (contributor.length() == 0)) {
			metadataCacheModel.contributor = null;
		}

		metadataCacheModel.rightsHolder = getRightsHolder();

		String rightsHolder = metadataCacheModel.rightsHolder;

		if ((rightsHolder != null) && (rightsHolder.length() == 0)) {
			metadataCacheModel.rightsHolder = null;
		}

		metadataCacheModel.rights = getRights();

		String rights = metadataCacheModel.rights;

		if ((rights != null) && (rights.length() == 0)) {
			metadataCacheModel.rights = null;
		}

		metadataCacheModel.provenance = getProvenance();

		String provenance = metadataCacheModel.provenance;

		if ((provenance != null) && (provenance.length() == 0)) {
			metadataCacheModel.provenance = null;
		}

		metadataCacheModel.source = getSource();

		String source = metadataCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			metadataCacheModel.source = null;
		}

		metadataCacheModel.relation = getRelation();

		String relation = metadataCacheModel.relation;

		if ((relation != null) && (relation.length() == 0)) {
			metadataCacheModel.relation = null;
		}

		metadataCacheModel.audience = getAudience();

		String audience = metadataCacheModel.audience;

		if ((audience != null) && (audience.length() == 0)) {
			metadataCacheModel.audience = null;
		}

		metadataCacheModel.instructionalMethods = getInstructionalMethods();

		String instructionalMethods = metadataCacheModel.instructionalMethods;

		if ((instructionalMethods != null) &&
				(instructionalMethods.length() == 0)) {
			metadataCacheModel.instructionalMethods = null;
		}

		Date date = getDate();

		if (date != null) {
			metadataCacheModel.date = date.getTime();
		}
		else {
			metadataCacheModel.date = Long.MIN_VALUE;
		}

		return metadataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{metadataId=");
		sb.append(getMetadataId());
		sb.append(", URLID=");
		sb.append(getURLID());
		sb.append(", format=");
		sb.append(getFormat());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", coverage=");
		sb.append(getCoverage());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", creator=");
		sb.append(getCreator());
		sb.append(", publisher=");
		sb.append(getPublisher());
		sb.append(", contributor=");
		sb.append(getContributor());
		sb.append(", rightsHolder=");
		sb.append(getRightsHolder());
		sb.append(", rights=");
		sb.append(getRights());
		sb.append(", provenance=");
		sb.append(getProvenance());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", relation=");
		sb.append(getRelation());
		sb.append(", audience=");
		sb.append(getAudience());
		sb.append(", instructionalMethods=");
		sb.append(getInstructionalMethods());
		sb.append(", date=");
		sb.append(getDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.Metadata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>metadataId</column-name><column-value><![CDATA[");
		sb.append(getMetadataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>URLID</column-name><column-value><![CDATA[");
		sb.append(getURLID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>format</column-name><column-value><![CDATA[");
		sb.append(getFormat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverage</column-name><column-value><![CDATA[");
		sb.append(getCoverage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creator</column-name><column-value><![CDATA[");
		sb.append(getCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publisher</column-name><column-value><![CDATA[");
		sb.append(getPublisher());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contributor</column-name><column-value><![CDATA[");
		sb.append(getContributor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rightsHolder</column-name><column-value><![CDATA[");
		sb.append(getRightsHolder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rights</column-name><column-value><![CDATA[");
		sb.append(getRights());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provenance</column-name><column-value><![CDATA[");
		sb.append(getProvenance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relation</column-name><column-value><![CDATA[");
		sb.append(getRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>audience</column-name><column-value><![CDATA[");
		sb.append(getAudience());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instructionalMethods</column-name><column-value><![CDATA[");
		sb.append(getInstructionalMethods());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Metadata.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Metadata.class
		};
	private long _metadataId;
	private String _URLID;
	private String _format;
	private String _type;
	private String _language;
	private String _title;
	private String _subject;
	private String _coverage;
	private String _description;
	private String _creator;
	private String _publisher;
	private String _contributor;
	private String _rightsHolder;
	private String _rights;
	private String _provenance;
	private String _source;
	private String _relation;
	private String _audience;
	private String _instructionalMethods;
	private Date _date;
	private Metadata _escapedModel;
}