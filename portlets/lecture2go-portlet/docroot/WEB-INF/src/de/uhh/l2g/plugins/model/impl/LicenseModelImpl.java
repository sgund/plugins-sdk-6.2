/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.License;
import de.uhh.l2g.plugins.model.LicenseModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the License service. Represents a row in the &quot;LG_License&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.LicenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LicenseImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see LicenseImpl
 * @see de.uhh.l2g.plugins.model.License
 * @see de.uhh.l2g.plugins.model.LicenseModel
 * @generated
 */
public class LicenseModelImpl extends BaseModelImpl<License>
	implements LicenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a license model instance should use the {@link de.uhh.l2g.plugins.model.License} interface instead.
	 */
	public static final String TABLE_NAME = "LG_License";
	public static final Object[][] TABLE_COLUMNS = {
			{ "licenseId", Types.BIGINT },
			{ "videoId", Types.BIGINT },
			{ "ccby", Types.INTEGER },
			{ "ccbybc", Types.INTEGER },
			{ "ccbyncnd", Types.INTEGER },
			{ "ccbyncsa", Types.INTEGER },
			{ "ccbysa", Types.INTEGER },
			{ "ccbync", Types.INTEGER },
			{ "l2go", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_License (licenseId LONG not null primary key,videoId LONG,ccby INTEGER,ccbybc INTEGER,ccbyncnd INTEGER,ccbyncsa INTEGER,ccbysa INTEGER,ccbync INTEGER,l2go INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LG_License";
	public static final String ORDER_BY_JPQL = " ORDER BY license.licenseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_License.licenseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.License"),
			true);
	public static long VIDEOID_COLUMN_BITMASK = 1L;
	public static long LICENSEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.License"));

	public LicenseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLicenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _licenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return License.class;
	}

	@Override
	public String getModelClassName() {
		return License.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("licenseId", getLicenseId());
		attributes.put("videoId", getVideoId());
		attributes.put("ccby", getCcby());
		attributes.put("ccbybc", getCcbybc());
		attributes.put("ccbyncnd", getCcbyncnd());
		attributes.put("ccbyncsa", getCcbyncsa());
		attributes.put("ccbysa", getCcbysa());
		attributes.put("ccbync", getCcbync());
		attributes.put("l2go", getL2go());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long licenseId = (Long)attributes.get("licenseId");

		if (licenseId != null) {
			setLicenseId(licenseId);
		}

		Long videoId = (Long)attributes.get("videoId");

		if (videoId != null) {
			setVideoId(videoId);
		}

		Integer ccby = (Integer)attributes.get("ccby");

		if (ccby != null) {
			setCcby(ccby);
		}

		Integer ccbybc = (Integer)attributes.get("ccbybc");

		if (ccbybc != null) {
			setCcbybc(ccbybc);
		}

		Integer ccbyncnd = (Integer)attributes.get("ccbyncnd");

		if (ccbyncnd != null) {
			setCcbyncnd(ccbyncnd);
		}

		Integer ccbyncsa = (Integer)attributes.get("ccbyncsa");

		if (ccbyncsa != null) {
			setCcbyncsa(ccbyncsa);
		}

		Integer ccbysa = (Integer)attributes.get("ccbysa");

		if (ccbysa != null) {
			setCcbysa(ccbysa);
		}

		Integer ccbync = (Integer)attributes.get("ccbync");

		if (ccbync != null) {
			setCcbync(ccbync);
		}

		Integer l2go = (Integer)attributes.get("l2go");

		if (l2go != null) {
			setL2go(l2go);
		}
	}

	@Override
	public long getLicenseId() {
		return _licenseId;
	}

	@Override
	public void setLicenseId(long licenseId) {
		_licenseId = licenseId;
	}

	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_columnBitmask |= VIDEOID_COLUMN_BITMASK;

		if (!_setOriginalVideoId) {
			_setOriginalVideoId = true;

			_originalVideoId = _videoId;
		}

		_videoId = videoId;
	}

	public long getOriginalVideoId() {
		return _originalVideoId;
	}

	@Override
	public int getCcby() {
		return _ccby;
	}

	@Override
	public void setCcby(int ccby) {
		_ccby = ccby;
	}

	@Override
	public int getCcbybc() {
		return _ccbybc;
	}

	@Override
	public void setCcbybc(int ccbybc) {
		_ccbybc = ccbybc;
	}

	@Override
	public int getCcbyncnd() {
		return _ccbyncnd;
	}

	@Override
	public void setCcbyncnd(int ccbyncnd) {
		_ccbyncnd = ccbyncnd;
	}

	@Override
	public int getCcbyncsa() {
		return _ccbyncsa;
	}

	@Override
	public void setCcbyncsa(int ccbyncsa) {
		_ccbyncsa = ccbyncsa;
	}

	@Override
	public int getCcbysa() {
		return _ccbysa;
	}

	@Override
	public void setCcbysa(int ccbysa) {
		_ccbysa = ccbysa;
	}

	@Override
	public int getCcbync() {
		return _ccbync;
	}

	@Override
	public void setCcbync(int ccbync) {
		_ccbync = ccbync;
	}

	@Override
	public int getL2go() {
		return _l2go;
	}

	@Override
	public void setL2go(int l2go) {
		_l2go = l2go;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			License.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public License toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (License)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LicenseImpl licenseImpl = new LicenseImpl();

		licenseImpl.setLicenseId(getLicenseId());
		licenseImpl.setVideoId(getVideoId());
		licenseImpl.setCcby(getCcby());
		licenseImpl.setCcbybc(getCcbybc());
		licenseImpl.setCcbyncnd(getCcbyncnd());
		licenseImpl.setCcbyncsa(getCcbyncsa());
		licenseImpl.setCcbysa(getCcbysa());
		licenseImpl.setCcbync(getCcbync());
		licenseImpl.setL2go(getL2go());

		licenseImpl.resetOriginalValues();

		return licenseImpl;
	}

	@Override
	public int compareTo(License license) {
		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof License)) {
			return false;
		}

		License license = (License)obj;

		long primaryKey = license.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LicenseModelImpl licenseModelImpl = this;

		licenseModelImpl._originalVideoId = licenseModelImpl._videoId;

		licenseModelImpl._setOriginalVideoId = false;

		licenseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<License> toCacheModel() {
		LicenseCacheModel licenseCacheModel = new LicenseCacheModel();

		licenseCacheModel.licenseId = getLicenseId();

		licenseCacheModel.videoId = getVideoId();

		licenseCacheModel.ccby = getCcby();

		licenseCacheModel.ccbybc = getCcbybc();

		licenseCacheModel.ccbyncnd = getCcbyncnd();

		licenseCacheModel.ccbyncsa = getCcbyncsa();

		licenseCacheModel.ccbysa = getCcbysa();

		licenseCacheModel.ccbync = getCcbync();

		licenseCacheModel.l2go = getL2go();

		return licenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{licenseId=");
		sb.append(getLicenseId());
		sb.append(", videoId=");
		sb.append(getVideoId());
		sb.append(", ccby=");
		sb.append(getCcby());
		sb.append(", ccbybc=");
		sb.append(getCcbybc());
		sb.append(", ccbyncnd=");
		sb.append(getCcbyncnd());
		sb.append(", ccbyncsa=");
		sb.append(getCcbyncsa());
		sb.append(", ccbysa=");
		sb.append(getCcbysa());
		sb.append(", ccbync=");
		sb.append(getCcbync());
		sb.append(", l2go=");
		sb.append(getL2go());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.License");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>licenseId</column-name><column-value><![CDATA[");
		sb.append(getLicenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoId</column-name><column-value><![CDATA[");
		sb.append(getVideoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccby</column-name><column-value><![CDATA[");
		sb.append(getCcby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccbybc</column-name><column-value><![CDATA[");
		sb.append(getCcbybc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccbyncnd</column-name><column-value><![CDATA[");
		sb.append(getCcbyncnd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccbyncsa</column-name><column-value><![CDATA[");
		sb.append(getCcbyncsa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccbysa</column-name><column-value><![CDATA[");
		sb.append(getCcbysa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccbync</column-name><column-value><![CDATA[");
		sb.append(getCcbync());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>l2go</column-name><column-value><![CDATA[");
		sb.append(getL2go());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = License.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			License.class
		};
	private long _licenseId;
	private long _videoId;
	private long _originalVideoId;
	private boolean _setOriginalVideoId;
	private int _ccby;
	private int _ccbybc;
	private int _ccbyncnd;
	private int _ccbyncsa;
	private int _ccbysa;
	private int _ccbync;
	private int _l2go;
	private long _columnBitmask;
	private License _escapedModel;
}