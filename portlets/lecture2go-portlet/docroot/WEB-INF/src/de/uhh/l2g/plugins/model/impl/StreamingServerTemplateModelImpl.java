/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.model.StreamingServerTemplate;
import de.uhh.l2g.plugins.model.StreamingServerTemplateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StreamingServerTemplate service. Represents a row in the &quot;LG_StreamingServerTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.model.StreamingServerTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StreamingServerTemplateImpl}.
 * </p>
 *
 * @author Iavor Sturm
 * @see StreamingServerTemplateImpl
 * @see de.uhh.l2g.plugins.model.StreamingServerTemplate
 * @see de.uhh.l2g.plugins.model.StreamingServerTemplateModel
 * @generated
 */
public class StreamingServerTemplateModelImpl extends BaseModelImpl<StreamingServerTemplate>
	implements StreamingServerTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a streaming server template model instance should use the {@link de.uhh.l2g.plugins.model.StreamingServerTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "LG_StreamingServerTemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "streamingServerTemplateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "type_", Types.INTEGER },
			{ "prefixURL", Types.VARCHAR },
			{ "suffixURL", Types.VARCHAR },
			{ "secExt", Types.VARCHAR },
			{ "templateURL", Types.VARCHAR },
			{ "prefixFile", Types.VARCHAR },
			{ "suffixFile", Types.VARCHAR },
			{ "templateFile", Types.VARCHAR },
			{ "templateIOS", Types.BIGINT },
			{ "templateAndroid", Types.BIGINT },
			{ "defaultServer", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LG_StreamingServerTemplate (streamingServerTemplateId LONG not null primary key,groupId LONG,name VARCHAR(75) null,type_ INTEGER,prefixURL VARCHAR(75) null,suffixURL VARCHAR(75) null,secExt VARCHAR(75) null,templateURL VARCHAR(75) null,prefixFile VARCHAR(75) null,suffixFile VARCHAR(75) null,templateFile VARCHAR(75) null,templateIOS LONG,templateAndroid LONG,defaultServer INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LG_StreamingServerTemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY streamingServerTemplate.streamingServerTemplateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LG_StreamingServerTemplate.streamingServerTemplateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.model.StreamingServerTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.model.StreamingServerTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.model.StreamingServerTemplate"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long STREAMINGSERVERTEMPLATEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.model.StreamingServerTemplate"));

	public StreamingServerTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _streamingServerTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStreamingServerTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _streamingServerTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StreamingServerTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return StreamingServerTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("streamingServerTemplateId",
			getStreamingServerTemplateId());
		attributes.put("groupId", getGroupId());
		attributes.put("name", getName());
		attributes.put("type", getType());
		attributes.put("prefixURL", getPrefixURL());
		attributes.put("suffixURL", getSuffixURL());
		attributes.put("secExt", getSecExt());
		attributes.put("templateURL", getTemplateURL());
		attributes.put("prefixFile", getPrefixFile());
		attributes.put("suffixFile", getSuffixFile());
		attributes.put("templateFile", getTemplateFile());
		attributes.put("templateIOS", getTemplateIOS());
		attributes.put("templateAndroid", getTemplateAndroid());
		attributes.put("defaultServer", getDefaultServer());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long streamingServerTemplateId = (Long)attributes.get(
				"streamingServerTemplateId");

		if (streamingServerTemplateId != null) {
			setStreamingServerTemplateId(streamingServerTemplateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String prefixURL = (String)attributes.get("prefixURL");

		if (prefixURL != null) {
			setPrefixURL(prefixURL);
		}

		String suffixURL = (String)attributes.get("suffixURL");

		if (suffixURL != null) {
			setSuffixURL(suffixURL);
		}

		String secExt = (String)attributes.get("secExt");

		if (secExt != null) {
			setSecExt(secExt);
		}

		String templateURL = (String)attributes.get("templateURL");

		if (templateURL != null) {
			setTemplateURL(templateURL);
		}

		String prefixFile = (String)attributes.get("prefixFile");

		if (prefixFile != null) {
			setPrefixFile(prefixFile);
		}

		String suffixFile = (String)attributes.get("suffixFile");

		if (suffixFile != null) {
			setSuffixFile(suffixFile);
		}

		String templateFile = (String)attributes.get("templateFile");

		if (templateFile != null) {
			setTemplateFile(templateFile);
		}

		Long templateIOS = (Long)attributes.get("templateIOS");

		if (templateIOS != null) {
			setTemplateIOS(templateIOS);
		}

		Long templateAndroid = (Long)attributes.get("templateAndroid");

		if (templateAndroid != null) {
			setTemplateAndroid(templateAndroid);
		}

		Integer defaultServer = (Integer)attributes.get("defaultServer");

		if (defaultServer != null) {
			setDefaultServer(defaultServer);
		}
	}

	@Override
	public long getStreamingServerTemplateId() {
		return _streamingServerTemplateId;
	}

	@Override
	public void setStreamingServerTemplateId(long streamingServerTemplateId) {
		_columnBitmask |= STREAMINGSERVERTEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalStreamingServerTemplateId) {
			_setOriginalStreamingServerTemplateId = true;

			_originalStreamingServerTemplateId = _streamingServerTemplateId;
		}

		_streamingServerTemplateId = streamingServerTemplateId;
	}

	public long getOriginalStreamingServerTemplateId() {
		return _originalStreamingServerTemplateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@Override
	public String getPrefixURL() {
		if (_prefixURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _prefixURL;
		}
	}

	@Override
	public void setPrefixURL(String prefixURL) {
		_prefixURL = prefixURL;
	}

	@Override
	public String getSuffixURL() {
		if (_suffixURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _suffixURL;
		}
	}

	@Override
	public void setSuffixURL(String suffixURL) {
		_suffixURL = suffixURL;
	}

	@Override
	public String getSecExt() {
		if (_secExt == null) {
			return StringPool.BLANK;
		}
		else {
			return _secExt;
		}
	}

	@Override
	public void setSecExt(String secExt) {
		_secExt = secExt;
	}

	@Override
	public String getTemplateURL() {
		if (_templateURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateURL;
		}
	}

	@Override
	public void setTemplateURL(String templateURL) {
		_templateURL = templateURL;
	}

	@Override
	public String getPrefixFile() {
		if (_prefixFile == null) {
			return StringPool.BLANK;
		}
		else {
			return _prefixFile;
		}
	}

	@Override
	public void setPrefixFile(String prefixFile) {
		_prefixFile = prefixFile;
	}

	@Override
	public String getSuffixFile() {
		if (_suffixFile == null) {
			return StringPool.BLANK;
		}
		else {
			return _suffixFile;
		}
	}

	@Override
	public void setSuffixFile(String suffixFile) {
		_suffixFile = suffixFile;
	}

	@Override
	public String getTemplateFile() {
		if (_templateFile == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateFile;
		}
	}

	@Override
	public void setTemplateFile(String templateFile) {
		_templateFile = templateFile;
	}

	@Override
	public long getTemplateIOS() {
		return _templateIOS;
	}

	@Override
	public void setTemplateIOS(long templateIOS) {
		_templateIOS = templateIOS;
	}

	@Override
	public long getTemplateAndroid() {
		return _templateAndroid;
	}

	@Override
	public void setTemplateAndroid(long templateAndroid) {
		_templateAndroid = templateAndroid;
	}

	@Override
	public int getDefaultServer() {
		return _defaultServer;
	}

	@Override
	public void setDefaultServer(int defaultServer) {
		_defaultServer = defaultServer;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StreamingServerTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StreamingServerTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StreamingServerTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StreamingServerTemplateImpl streamingServerTemplateImpl = new StreamingServerTemplateImpl();

		streamingServerTemplateImpl.setStreamingServerTemplateId(getStreamingServerTemplateId());
		streamingServerTemplateImpl.setGroupId(getGroupId());
		streamingServerTemplateImpl.setName(getName());
		streamingServerTemplateImpl.setType(getType());
		streamingServerTemplateImpl.setPrefixURL(getPrefixURL());
		streamingServerTemplateImpl.setSuffixURL(getSuffixURL());
		streamingServerTemplateImpl.setSecExt(getSecExt());
		streamingServerTemplateImpl.setTemplateURL(getTemplateURL());
		streamingServerTemplateImpl.setPrefixFile(getPrefixFile());
		streamingServerTemplateImpl.setSuffixFile(getSuffixFile());
		streamingServerTemplateImpl.setTemplateFile(getTemplateFile());
		streamingServerTemplateImpl.setTemplateIOS(getTemplateIOS());
		streamingServerTemplateImpl.setTemplateAndroid(getTemplateAndroid());
		streamingServerTemplateImpl.setDefaultServer(getDefaultServer());

		streamingServerTemplateImpl.resetOriginalValues();

		return streamingServerTemplateImpl;
	}

	@Override
	public int compareTo(StreamingServerTemplate streamingServerTemplate) {
		long primaryKey = streamingServerTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StreamingServerTemplate)) {
			return false;
		}

		StreamingServerTemplate streamingServerTemplate = (StreamingServerTemplate)obj;

		long primaryKey = streamingServerTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StreamingServerTemplateModelImpl streamingServerTemplateModelImpl = this;

		streamingServerTemplateModelImpl._originalStreamingServerTemplateId = streamingServerTemplateModelImpl._streamingServerTemplateId;

		streamingServerTemplateModelImpl._setOriginalStreamingServerTemplateId = false;

		streamingServerTemplateModelImpl._originalGroupId = streamingServerTemplateModelImpl._groupId;

		streamingServerTemplateModelImpl._setOriginalGroupId = false;

		streamingServerTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StreamingServerTemplate> toCacheModel() {
		StreamingServerTemplateCacheModel streamingServerTemplateCacheModel = new StreamingServerTemplateCacheModel();

		streamingServerTemplateCacheModel.streamingServerTemplateId = getStreamingServerTemplateId();

		streamingServerTemplateCacheModel.groupId = getGroupId();

		streamingServerTemplateCacheModel.name = getName();

		String name = streamingServerTemplateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			streamingServerTemplateCacheModel.name = null;
		}

		streamingServerTemplateCacheModel.type = getType();

		streamingServerTemplateCacheModel.prefixURL = getPrefixURL();

		String prefixURL = streamingServerTemplateCacheModel.prefixURL;

		if ((prefixURL != null) && (prefixURL.length() == 0)) {
			streamingServerTemplateCacheModel.prefixURL = null;
		}

		streamingServerTemplateCacheModel.suffixURL = getSuffixURL();

		String suffixURL = streamingServerTemplateCacheModel.suffixURL;

		if ((suffixURL != null) && (suffixURL.length() == 0)) {
			streamingServerTemplateCacheModel.suffixURL = null;
		}

		streamingServerTemplateCacheModel.secExt = getSecExt();

		String secExt = streamingServerTemplateCacheModel.secExt;

		if ((secExt != null) && (secExt.length() == 0)) {
			streamingServerTemplateCacheModel.secExt = null;
		}

		streamingServerTemplateCacheModel.templateURL = getTemplateURL();

		String templateURL = streamingServerTemplateCacheModel.templateURL;

		if ((templateURL != null) && (templateURL.length() == 0)) {
			streamingServerTemplateCacheModel.templateURL = null;
		}

		streamingServerTemplateCacheModel.prefixFile = getPrefixFile();

		String prefixFile = streamingServerTemplateCacheModel.prefixFile;

		if ((prefixFile != null) && (prefixFile.length() == 0)) {
			streamingServerTemplateCacheModel.prefixFile = null;
		}

		streamingServerTemplateCacheModel.suffixFile = getSuffixFile();

		String suffixFile = streamingServerTemplateCacheModel.suffixFile;

		if ((suffixFile != null) && (suffixFile.length() == 0)) {
			streamingServerTemplateCacheModel.suffixFile = null;
		}

		streamingServerTemplateCacheModel.templateFile = getTemplateFile();

		String templateFile = streamingServerTemplateCacheModel.templateFile;

		if ((templateFile != null) && (templateFile.length() == 0)) {
			streamingServerTemplateCacheModel.templateFile = null;
		}

		streamingServerTemplateCacheModel.templateIOS = getTemplateIOS();

		streamingServerTemplateCacheModel.templateAndroid = getTemplateAndroid();

		streamingServerTemplateCacheModel.defaultServer = getDefaultServer();

		return streamingServerTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{streamingServerTemplateId=");
		sb.append(getStreamingServerTemplateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", prefixURL=");
		sb.append(getPrefixURL());
		sb.append(", suffixURL=");
		sb.append(getSuffixURL());
		sb.append(", secExt=");
		sb.append(getSecExt());
		sb.append(", templateURL=");
		sb.append(getTemplateURL());
		sb.append(", prefixFile=");
		sb.append(getPrefixFile());
		sb.append(", suffixFile=");
		sb.append(getSuffixFile());
		sb.append(", templateFile=");
		sb.append(getTemplateFile());
		sb.append(", templateIOS=");
		sb.append(getTemplateIOS());
		sb.append(", templateAndroid=");
		sb.append(getTemplateAndroid());
		sb.append(", defaultServer=");
		sb.append(getDefaultServer());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.model.StreamingServerTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>streamingServerTemplateId</column-name><column-value><![CDATA[");
		sb.append(getStreamingServerTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prefixURL</column-name><column-value><![CDATA[");
		sb.append(getPrefixURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suffixURL</column-name><column-value><![CDATA[");
		sb.append(getSuffixURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secExt</column-name><column-value><![CDATA[");
		sb.append(getSecExt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateURL</column-name><column-value><![CDATA[");
		sb.append(getTemplateURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prefixFile</column-name><column-value><![CDATA[");
		sb.append(getPrefixFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>suffixFile</column-name><column-value><![CDATA[");
		sb.append(getSuffixFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateFile</column-name><column-value><![CDATA[");
		sb.append(getTemplateFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateIOS</column-name><column-value><![CDATA[");
		sb.append(getTemplateIOS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateAndroid</column-name><column-value><![CDATA[");
		sb.append(getTemplateAndroid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultServer</column-name><column-value><![CDATA[");
		sb.append(getDefaultServer());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StreamingServerTemplate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StreamingServerTemplate.class
		};
	private long _streamingServerTemplateId;
	private long _originalStreamingServerTemplateId;
	private boolean _setOriginalStreamingServerTemplateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _name;
	private int _type;
	private String _prefixURL;
	private String _suffixURL;
	private String _secExt;
	private String _templateURL;
	private String _prefixFile;
	private String _suffixFile;
	private String _templateFile;
	private long _templateIOS;
	private long _templateAndroid;
	private int _defaultServer;
	private long _columnBitmask;
	private StreamingServerTemplate _escapedModel;
}